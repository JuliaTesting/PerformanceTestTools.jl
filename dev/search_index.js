var documenterSearchIndex = {"docs":
[{"location":"#PerformanceTestTools.jl","page":"Home","title":"PerformanceTestTools.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"PerformanceTestTools\nPerformanceTestTools.@include\nPerformanceTestTools.@include_foreach\nPerformanceTestTools.include_foreach","category":"page"},{"location":"#PerformanceTestTools","page":"Home","title":"PerformanceTestTools","text":"PerformanceTestTools\n\n(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Codecov) (Image: Coveralls) (Image: GitHub commits since tagged version)\n\nTesting generated IRs inside CI is useful for avoiding performance regression.  However, test suites are normally run under flags like --check-bounds=yes and --code-coverage=user which block julia compiler to generate efficient code. PerformanceTestTools.@include(script) automatically detects such flags and run the script in a separate julia process started without these flags.\n\n\n\n\n\n","category":"module"},{"location":"#PerformanceTestTools.@include","page":"Home","title":"PerformanceTestTools.@include","text":"PerformanceTestTools.@include(script)\n\nInclude a test script or run it in an external process if one of the following flags is specified for the current process:\n\n--inline=no\n--check-bounds=yes\n--code-coverage=user\n--code-coverage=all\n\nTest script should contain, e.g., @test to appropriately throw when there is a failing test.\n\n\n\n\n\n","category":"macro"},{"location":"#PerformanceTestTools.@include_foreach","page":"Home","title":"PerformanceTestTools.@include_foreach","text":"PerformanceTestTools.@include_foreach(script, speclist)\n\nInclude script for each set of Julia CLI options and environment variables specified by speclist in an undefined order.\n\nEach item in speclist must be\n\na vector of:\na Cmd to specify CLI option(s); e.g., `--compile=min`.\na Pair{String,String} to specify an environment variable to be added; e.g., \"JULIA_NUM_THREADS\" => \"4\".\na Pair{String,Nothing} to specify an environment variable to be removed; e.g., \"JULIA_CPU_THREADS\" => nothing.\na dictionary, instead of vector of pairs.\nnothing for including script in the current process.\n\nLike @include, test script should contain, e.g., @test to appropriately throw when there is a failing test.\n\nSee also include_foreach.\n\nExamples\n\nTo test with and without multi-threading enabled:\n\nPerformanceTestTools.@include_foreach(\n    \"tests_using_threads.jl\",\n    [nothing, [\"JULIA_NUM_THREADS\" => \"4\"]],\n)\n\nTo test both branches of if @generated:\n\nPerformanceTestTools.@include_foreach(\n    \"tests_using_generated_functions.jl\",\n    [nothing, [`--compile=min`]],\n)\n\nTo make them more robust with respect to how the current process is executed:\n\nPerformanceTestTools.@include_foreach(\n    \"tests_using_threads.jl\",\n    [nothing, [\"JULIA_NUM_THREADS\" => Threads.nthreads() > 1 ? \"1\" : \"4\"]],\n)\n\nPerformanceTestTools.@include_foreach(\n    \"tests_using_generated_functions.jl\",\n    [nothing, [\"--compile=min\" in Base.julia_cmd() ? `--compile=yes` : `--compile=min`]],\n)\n\nTo run a script with different CLI spces in parallel:\n\nPerformanceTestTools.@include_foreach(\n    \"test.jl\",\n    [nothing, [`--compile=min`], [`--check-bounds=no`]],\n    parallel = true,\n)\n\nKeyword Arguments\n\nparallel::Bool = false: run scripts in parallel.\n\n\n\n\n\n","category":"macro"},{"location":"#PerformanceTestTools.include_foreach","page":"Home","title":"PerformanceTestTools.include_foreach","text":"PerformanceTestTools.include_foreach(script, speclist)\n\nLike @include_foreach but relative path script is resolved with respect to the current working directory, instead of the file in which this function is called.\n\n\n\n\n\n","category":"function"}]
}
