var documenterSearchIndex = {"docs":
[{"location":"#PerformanceTestTools.jl-1","page":"Home","title":"PerformanceTestTools.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"PerformanceTestTools\nPerformanceTestTools.@include","category":"page"},{"location":"#PerformanceTestTools","page":"Home","title":"PerformanceTestTools","text":"PerformanceTestTools\n\n(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Codecov) (Image: Coveralls) (Image: GitHub commits since tagged version)\n\nTesting generated IRs inside CI is useful for avoiding performance regression.  However, test suites are normally run under flags like --check-bounds=yes and --code-coverage=user which block julia compiler to generate efficient code. PerformanceTestTools.@include(script) automatically detects such flags and run the script in a separate julia process started without these flags.\n\n\n\n\n\n","category":"module"},{"location":"#PerformanceTestTools.@include","page":"Home","title":"PerformanceTestTools.@include","text":"PerformanceTestTools.@include(script)\n\nInclude a test script or run it in an external process if one of the following flags is specified for the current process:\n\n--inline=no\n--check-bounds=yes\n--code-coverage=user\n--code-coverage=all\n\nTest script should contain, e.g., @test to appropriately throw when there is a failing test.\n\n\n\n\n\n","category":"macro"}]
}
